datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    username      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Post          Post[]
    Comment       Comment[]
    Like          Like[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Like {
    id        String   @id @default(cuid())
    users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    posts     Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    comments  Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
    userId    String
    postId    String?
    commentId String?

    @@unique([userId, postId])
    @@unique([userId, commentId])
}

model Post {
    id            String    @id @default(cuid())
    content       String
    channel       String
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    likesCount    Int       @default(0)
    replyCount    Int       @default(0)
    comments      Comment[]
    Like          Like[]
    likeUserId    String?
    likeCommentId String?
}

model Comment {
    id            String    @id @default(cuid())
    post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId        String
    content       String
    channel       String
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    childComments Comment[] @relation("ParentComment")
    parentComment Comment?  @relation("ParentComment", fields: [parentId], references: [id], onDelete: Cascade)
    parentId      String?
    userId        String
    likesCount    Int       @default(0)
    replyCount    Int       @default(0)
    Like          Like[]
}
